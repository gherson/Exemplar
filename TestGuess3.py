# AUTOGENERATED FILE -- RENAME OR YOUR EDITS WILL BE OVERWRITTEN
import unittest, exemplar
io_trace = ''  # Will receive each test's print()'ed values.
example_input = []   # Assigned in each test to provide input() values to the function under test.


# print() is mocked so the tests can recreate the .exem in io_trace.
def print(line: str = "") -> None:
    global io_trace
    io_trace += ">" + line + '\n'


# input() is mocked to simulate user entries, for the tests' processing and for the tests' io_trace record.
def input(line: str = "") -> str:
    global io_trace
    result = example_input.pop(0)
    io_trace += "<" + result + '\n'  # Eg, '<Albert\n'
    return result


# Return the i/o statements of the named .exem file for comparison with io_trace.
def get_expected(exem: str) -> str:
    out_exem_lines = []
    for line in exemplar.clean(exemplar.from_file(exem)):
        if line.startswith('<') or line.startswith('>'):
            out_exem_lines.append(line)
    return '\n'.join(out_exem_lines) + '\n'


# The (working) sequential target function.
def guess3():
    __example__=0
    assert __example__==0
    print('Hello! What is your name?')
    name = input('name:')  # Eg, Albert
    secret = int(input('secret:'))  # Eg, 4
    print('Well, ' + str(name) + ', I am thinking of a number between 1 and 20.')
    guess_count=0
    assert guess_count==0
    print('Take a guess.')
    guess = int(input('guess:'))  # Eg, 10
    assert guess>secret  #if guess>secret:
    print('Your guess is too high.')
    guess_count = 1
    assert guess_count == 1
    print('Take a guess.')
    guess = int(input('guess:'))  # Eg, 2
    assert guess<secret  #if guess<secret:
    print('Your guess is too low.')
    guess_count=2
    assert guess_count==2
    print('Take a guess.')
    guess = int(input('guess:'))  # Eg, 4
    assert guess==secret  #if guess==secret:
    assert guess_count + 1 == 3  #if guess_count + 1 == 3:
    print('Good job, ' + str(name) + '! You guessed my number in 3 guesses!')


# The (generated) function under test.
def guess3():
    print('Hello! What is your name?')
    name = input('name:')  # Eg, Albert
    secret = int(input('secret:'))  # Eg, 4
    print('Well, ' + str(name) + ', I am thinking of a number between 1 and 20.')
    for guess_count in range(0, 3):
        print('Take a guess.')
        guess = int(input('guess:'))  # Eg, 10
        elif guess>secret:
            print('Your guess is too high.')
            elif guess<secret:
                print('Your guess is too low.')
                elif guess==secret:
                    elif guess_count + 1 == 3:
                        print('Good job, ' + str(name) + '! You guessed my number in 3 guesses!')


class TestGuess3(unittest.TestCase):

    def setUp(self):
        global io_trace
        io_trace = ''
    
    def test_guess31(self):
        global example_input
        example_input = ['Albert', '4', '10', '2', '4']  # From an example of the .exem
        guess3()  # The function under test is used to write to io_trace.
        self.assertEqual(get_expected('guess3.exem'), io_trace)


if __name__ == '__main__':
    unittest.main()
