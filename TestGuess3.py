# AUTOGENERATED FILE
import unittest
import exemplar
out_trace = ''


# This print() should recreate the .exem in out_trace (stripped of comments).
def print(line: str = "") -> None:
    global out_trace
    out_trace += ">" + line + '\n'


def guess3():
    print('Hello! What is your name?')
    name = 'Albert'
    secret = 4
    print('Well, ' + name + ', I am thinking of a number between 1 and 20.')
    print('Take a guess.')
    guess = 10
    print('Your guess is too high.')
    print('Take a guess.')
    guess = 2
    print('Your guess is too low.')
    print('Take a guess.')
    guess = 4
    print('Good job, ' + name + '! You guessed my number in 3 guesses!')


class TestGuess3(unittest.TestCase):

    def setUp(self):
        global out_trace
        out_trace = ''

    # Return the named exem (stripped of comments).
    @staticmethod
    def get_expected(exem: str) -> str:
        out_exem_lines = []
        for line in exemplar.clean(exemplar.from_file(exem)):
            if line.startswith('>'):
                out_exem_lines.append(line)
        return '\n'.join(out_exem_lines) + '\n'

    def test_guess31(self):
        guess3()  # The function under test.
        self.assertEqual(self.get_expected('guess3.exem'), out_trace)


if __name__ == '__main__':
    unittest.main()


''' The source .exem, for reference:
>Hello! What is your name?
<Albert
name=="Albert"
<4
secret==4
>Well, Albert, I am thinking of a number between 1 and 20.
>Take a guess.
<10
guess==10, 10>4, guess_count==1
>Your guess is too high.
>Take a guess.
<2
guess==2, 2<4, guess_count==2
>Your guess is too low.
>Take a guess.
<4
guess==4, 4==4, guess_count==3
>Good job, Albert! You guessed my number in 3 guesses!
'''
