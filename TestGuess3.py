# AUTOGENERATED FILE -- RENAME OR YOUR EDITS WILL BE OVERWRITTEN
import unittest
import exemplar
out_trace = ''
in_trace = []


# print() is redefined to recreate a clean .exem in out_trace (stripped of comments).
def print(line: str = "") -> None:
    global out_trace
    out_trace += ">" + line + '\n'


# input() is redefined to recreate a clean .exem in out_trace (stripped of comments).
# N.B. Automated testing requires that standard input be redirected to come from a file.
def input(line: str = "") -> None:
    global out_trace, in_trace
    out_trace += "<" + in_trace.pop() + '\n'  # Eg, '<Albert\n'


    print('Hello! What is your name?')
    name = input('name:')  # Albert
    secret = input('secret:')  # 4
    print('Well, ' + str(name) + ', I am thinking of a number between 1 and 20.')
    for guess_count in range(0, 3):
        assert guess_count==0  #
        print('Take a guess.')
        guess = input('guess:')  # 10
        if i1>4:
            assert i1>4  #
            print('Your guess is too high.')
            print('Take a guess.')
            guess = input('guess:')  # 2
            if i1<4:
                assert i1<4  #
                print('Your guess is too low.')
                print('Take a guess.')
                guess = input('guess:')  # 4
                if i1==4:
                    assert i1==4  #
                    print('Good job, ' + str(name) + '! You guessed my number in 3 guesses!')

class TestGuess3(unittest.TestCase):

    def setUp(self):
        global out_trace
        out_trace = ''

    # Return the named exem (stripped of comments).
    @staticmethod
    def get_expected(exem: str) -> str:
        out_exem_lines = []
        for line in exemplar.clean(exemplar.from_file(exem)):
            if line.startswith('>'):
                out_exem_lines.append(line)
        return '\n'.join(out_exem_lines) + '\n'

    def test_guess31(self):
        guess3()  # The function under test.
        self.assertEqual(self.get_expected('guess3.exem'), out_trace)


if __name__ == '__main__':
    unittest.main()


''' The source .exem, for reference:
"""
The 1st column of line comments map to the code line #s at
http://inventwithpython.com/invent4thed/chapter3.html.
The 2nd column map to the code lines of a sequential guess3().
"""
>Hello! What is your name?                                  # 6                 1
<Albert                                                     # 7                 2
name==i1         # simple assignment (SA)                   # 7                 2
<4                                                          # 9                 3
secret==i1       # SA                                       # 9                 3
>Well, Albert, I am thinking of a number between 1 and 20.  # 10                4
guess_count==0   # iteration                                # 12
>Take a guess.                                              # 13                5
<10                                                         # 14, 15            6
guess==i1, i1>4  # SA, selection                            # 14, 15, 20        6
>Your guess is too high.                                    # 21                8
guess_count == 1 # iteration                                # 12                7
>Take a guess.                                              # 13                9
<2                                                          # 14, 15            10
guess==i1, i1<4  # SA, selection                            # 14, 15, 17        10
>Your guess is too low.                                     # 18                11
guess_count==2   # iteration                                # 12
>Take a guess.                                              # 13                12
<4                                                          # 14, 15            13
guess==i1, i1==4 # SA, selection                            # 14, 15, 23, 24
>Good job, Albert! You guessed my number in 3 guesses!      # 26, 27, 28        14
'''
