# AUTOGENERATED FILE
import unittest
import exemplar
io_trace = ''


# This print() and ...
def print(line: str = "") -> None:
    global io_trace
    io_trace += ">" + line + '\n'


# this input should recreate the .exem in io_trace (stripped of comments).
def input(line: str = "") -> None:
    global io_trace
    io_trace += "<" + line + '\n'


def jokes():
    print('What do you get when you cross a snowman with a vampire?')
    input()
    print('Frostbite!')
    print('')
    print('What do dentists call an astronaut\'s cavity?')
    input()
    print('A black hole!')
    print('')
    print('Knock knock.')
    input()
    print('Who\'s there?')
    input()
    print('Interrupting cow.')
    input()
    print('Interrupting cow wh-MOO!')


class TestJokes(unittest.TestCase):

    def setUp(self):
        global io_trace
        io_trace = ''

    # Return the named exem (stripped of comments).
    @staticmethod
    def get_expected(exem: str) -> str:
        io_exem_lines = []
        for line in exemplar.clean(exemplar.from_file(exem)):
            if line.startswith('<') or line.startswith('>'):
                io_exem_lines.append(line)
        return '\n'.join(io_exem_lines) + '\n'

    def test_jokes1(self):
        jokes()  # The function under test.
        self.assertEqual(self.get_expected('jokes.exem'), io_trace)

if __name__ == '__main__':
    unittest.main()
