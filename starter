# AUTOGENERATED FILE -- RENAME OR YOUR EDITS WILL BE OVERWRITTEN
import unittest, exemplar
out_trace = ''  # Will receive each test's print()'ed values.
in_trace = []   # Assigned in each test to provide input() values to the function under test.


# print() is mocked to allow the tests a chance to recreate the .exem in out_trace.
def print(line: str = "") -> None:
    global out_trace
    out_trace += ">" + line + '\n'


# input() is mocked to simulate user entries and allow the tests to recreate the .exem in out_trace.
def input(line: str = "") -> str:
    global out_trace
    result = in_trace.pop(0)
    out_trace += "<" + result + '\n'  # Eg, '<Albert\n'
    return result


# The (generated) function under test.
<function under test>


<class signature>

    def setUp(self):
        global out_trace
        out_trace = ''

    # Return the i/o statements of the named .exem file for comparison with out_trace.
    @staticmethod
    def get_expected(exem: str) -> str:
        out_exem_lines = []
        for line in exemplar.clean(exemplar.from_file(exem)):
            if line.startswith('<') or line.startswith('>'):
                out_exem_lines.append(line)
        return '\n'.join(out_exem_lines) + '\n'
