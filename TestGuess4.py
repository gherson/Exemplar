# AUTOGENERATED FILE -- RENAME OR YOUR EDITS WILL BE OVERWRITTEN
import unittest, exemplar
actual_io_trace = ''  # Receives test values print()'ed and input().
global_input = []   # Assigned in each test to provide input() values to the function under test.


# 3 functions unchanged from starter:
# print() is mocked to see if the tests recreate the .exem-specified i/o in actual_io_trace.
def print(line="") -> None:
    global actual_io_trace
    if line is str:
        line = line.translate(str.maketrans({"'": r"\'"}))  # Escape single quotes
    actual_io_trace += ">" + str(line) + '\n'


# input() is mocked to return the test-specified input as well as add it to actual_io_trace.
def input(variable_name: str = "") -> str:
    # (variable_name is ignored because it may not have been specified by the .exem.)
    global actual_io_trace
    result = global_input.pop(0)
    result = result.translate(str.maketrans({"'": r"\'"}))  # Escape single quotes
    actual_io_trace += "<" + result + '\n'  # Eg, '<Albert\n'
    return result


# The generated function under Stage 2 (i.e., a test per example) testing.
def guess4():
    print('Hello! What is your name?')
    name = input("name:")  # Eg, John
    secret = int(input("secret:"))  # Eg, 3
    print('Well, ' + str(name) + ', I am thinking of a number between 1 and 20.')
    for guess_count in range(0, 6, 1):
        print('Take a guess.')
        guess = int(input("guess:"))  # Eg, 11
        if guess>secret:
            print('Your guess is too high.')
        elif guess<secret:
            print('Your guess is too low.')
        elif guess==secret:
            print('Good job, ' + str(name) + '! You guessed my number in ' + str(guess_count+1) + ' guesses!')
            break
    if guess_count>=5:
        print('Nope. The number I was thinking of was ' + str(secret) + '.')


class TestGuess4(unittest.TestCase):

    def setUp(self):
        global actual_io_trace
        actual_io_trace = ''
        self.maxDiff = None

    def test_guess445(self):
        global global_input
        global_input = ['John', '3', '11', '1', '2', '10', '9', '8']  # From an example of the .exem
        guess4()  # The function under test is used to write to actual_io_trace.
        self.assertEqual('''>Hello! What is your name?
<John
<3
>Well, John, I am thinking of a number between 1 and 20.
>Take a guess.
<11
>Your guess is too high.
>Take a guess.
<1
>Your guess is too low.
>Take a guess.
<2
>Your guess is too low.
>Take a guess.
<10
>Your guess is too high.
>Take a guess.
<9
>Your guess is too high.
>Take a guess.
<8
>Your guess is too high.
>Nope. The number I was thinking of was 3.
''', actual_io_trace)

    def test_guess470(self):
        global global_input
        global_input = ['Albert', '4', '10', '2', '4']  # From an example of the .exem
        guess4()  # The function under test is used to write to actual_io_trace.
        self.assertEqual('''>Hello! What is your name?
<Albert
<4
>Well, Albert, I am thinking of a number between 1 and 20.
>Take a guess.
<10
>Your guess is too high.
>Take a guess.
<2
>Your guess is too low.
>Take a guess.
<4
>Good job, Albert! You guessed my number in 3 guesses!
''', actual_io_trace)


if __name__ == '__main__':
    unittest.main()
