# AUTOGENERATED FILE -- RENAME OR YOUR EDITS WILL BE OVERWRITTEN
import unittest, exemplar
io_trace = ''  # Will receive each test's print()'ed values.
example_input = []   # Assigned in each test to provide input() values to the function under test.


# print() is mocked so the tests can recreate the .exem in io_trace.
def print(line: str = "") -> None:
    global io_trace
    io_trace += ">" + line + '\n'


# input() is mocked to simulate user entries, for the tests' processing and for the tests' io_trace record.
def input(line: str = "") -> str:
    global io_trace
    result = example_input.pop(0)
    io_trace += "<" + result + '\n'  # Eg, '<Albert\n'
    return result


# Return the i/o statements of the named .exem file for comparison with io_trace.
def get_expected(exem: str) -> str:
    out_exem_lines = []
    for line in exemplar.clean(exemplar.from_file(exem)):
        if line.startswith('<') or line.startswith('>'):
            out_exem_lines.append(line)
    return '\n'.join(out_exem_lines) + '\n'


# The sequential target function.
def guess4():
    print('Hello! What is your name?')
    v15 = input('v15:')  # Eg, Albert
    v25 = int(input('v25:'))  # Eg, 4
    print('Well, ' + str(v15) + ', I am thinking of a number between 1 and 20.')
    print('Take a guess.')
    v50 = int(input('v50:'))  # Eg, 10
    print('Your guess is too high.')
    print('Take a guess.')
    v80 = int(input('v80:'))  # Eg, 2
    print('Your guess is too low.')
    print('Take a guess.')
    v110 = int(input('v110:'))  # Eg, 4
    print('Good job, ' + str(v15) + '! You guessed my number in 3 guesses!')
    print('Hello! What is your name?')
    v145 = input('v145:')  # Eg, John
    v155 = int(input('v155:'))  # Eg, 3
    print('Well, ' + str(v145) + ', I am thinking of a number between 1 and 20.')
    print('Take a guess.')
    v180 = int(input('v180:'))  # Eg, 11
    print('Your guess is too high.')
    print('Take a guess.')
    v210 = int(input('v210:'))  # Eg, 1
    print('Your guess is too low.')
    print('Take a guess.')
    v240 = int(input('v240:'))  # Eg, 2
    print('Your guess is too low.')
    print('Take a guess.')
    v270 = int(input('v270:'))  # Eg, 10
    print('Your guess is too high.')
    print('Take a guess.')
    v300 = int(input('v300:'))  # Eg, 9
    print('Your guess is too high.')
    print('Take a guess.')
    v330 = int(input('v330:'))  # Eg, 8
    print('Your guess is too high.')
    print('Nope. The number I was thinking of was ' + str(v155) + '.')


# The (generated) function under test.
def guess4():
    for __example__ in range(0, 2):
    print('Hello! What is your name?')
    v15 = input('v15:')  # Eg, Albert
    v25 = int(input('v25:'))  # Eg, 4
    print('Well, ' + str(v15) + ', I am thinking of a number between 1 and 20.')
    for guess_count in range(0, 3):
    print('Take a guess.')
    v50 = int(input('v50:'))  # Eg, 10
    print('Your guess is too high.')
    for guess_count in range(0, 3):
    print('Take a guess.')
    v80 = int(input('v80:'))  # Eg, 2
    print('Your guess is too low.')
                        for guess_count in range(0, 3):
    print('Take a guess.')
    v110 = int(input('v110:'))  # Eg, 4
    print('Good job, ' + str(v15) + '! You guessed my number in 3 guesses!')
    for __example__ in range(0, 2):
    print('Hello! What is your name?')
    v145 = input('v145:')  # Eg, John
    v155 = int(input('v155:'))  # Eg, 3
    print('Well, ' + str(v145) + ', I am thinking of a number between 1 and 20.')
    for guess_count in range(0, 3):
    print('Take a guess.')
    v180 = int(input('v180:'))  # Eg, 11
    print('Your guess is too high.')
    for guess_count in range(0, 3):
    print('Take a guess.')
    v210 = int(input('v210:'))  # Eg, 1
    print('Your guess is too low.')
    for guess_count in range(0, 3):
    print('Take a guess.')
    v240 = int(input('v240:'))  # Eg, 2
    print('Your guess is too low.')
    for guess_count in range(0, 3):
    print('Take a guess.')
    v270 = int(input('v270:'))  # Eg, 10
    print('Your guess is too high.')
    for guess_count in range(0, 3):
    print('Take a guess.')
    v300 = int(input('v300:'))  # Eg, 9
    print('Your guess is too high.')
                            for guess_count in range(0, 3):
    print('Take a guess.')
    v330 = int(input('v330:'))  # Eg, 8
    print('Your guess is too high.')
    print('Nope. The number I was thinking of was ' + str(v155) + '.')


class TestGuess4(unittest.TestCase):

    def setUp(self):
        global io_trace
        io_trace = ''
    
    def test_guess41(self):
        global example_input
        example_input = ['Albert', '4', '10', '2', '4']  # From an example of the .exem
        guess4()  # The function under test is used to write to io_trace.
        self.assertEqual(get_expected('guess4.exem'), io_trace)
    
    def test_guess42(self):
        global example_input
        example_input = ['John', '3', '11', '1', '2', '10', '9', '8']  # From an example of the .exem
        guess4()  # The function under test is used to write to io_trace.
        self.assertEqual(get_expected('guess4.exem'), io_trace)


if __name__ == '__main__':
    unittest.main()
