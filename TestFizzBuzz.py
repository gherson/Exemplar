# AUTOGENERATED FILE -- RENAME OR YOUR EDITS WILL BE OVERWRITTEN
import unittest, exemplar
actual_io_trace = ''  # Receives test values print()'ed and input().
global_input = []   # Assigned in each test to provide input() values to the function under test.


# 3 functions unchanged from starter:
# print() is mocked to see if the tests recreate the .exem-specified i/o in actual_io_trace.
def print(line="") -> None:
    global actual_io_trace
    if line is str:
        line = line.translate(str.maketrans({"'": r"\'"}))  # Escape single quotes
    actual_io_trace += ">" + str(line) + '\n'


# input() is mocked to return the test-specified input as well as add it to actual_io_trace.
def input(variable_name: str = "") -> str:
    # (variable_name is ignored because it may not have been specified by the .exem.)
    global actual_io_trace
    result = global_input.pop(0)
    result = result.translate(str.maketrans({"'": r"\'"}))  # Escape single quotes
    actual_io_trace += "<" + result + '\n'  # Eg, '<Albert\n'
    return result


# Return the i/o statements of the named .exem file (for comparison with actual_io_trace).
def get_expected_io(exem: str, example_id: int = -1) -> str:
    return_exem_io_lines = []
    example_reached = 0
    for line in exemplar.clean(exemplar.from_file(exem)):
        if not line.strip():  # line's empty,
            example_reached += 1  # increment example count
        if ((line.startswith('<') or line.startswith('>')) and
                (example_id==example_reached or example_id==-1)):  # `line` is an i/o line of {correct or any} example?
            return_exem_io_lines.append(line)                      # Then note it for return.
    return '\n'.join(return_exem_io_lines) + '\n'


# The generated function under test.
def fizz_buzz():
    i1 = int(input("i1:"))  # Eg, 1
    if i1 % 3 == 0 and i1 % 5 == 0:
        print('FizzBuzz')
        return 'FizzBuzz'
    elif i1%3==0:
        print('Fizz')
        return 'Fizz'
    elif i1%5==0:
        print('Buzz')
        return 'Buzz'
    elif True:
        print('i1')
        return 'i1'


class TestFizzBuzz(unittest.TestCase):

    def setUp(self):
        global actual_io_trace
        actual_io_trace = ''
        self.maxDiff = None
    
    def test_fizz_buzz1(self):
        global global_input
        global_input = ['1']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=0), actual_io_trace)
    
    def test_fizz_buzz2(self):
        global global_input
        global_input = ['2']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=1), actual_io_trace)
    
    def test_fizz_buzz3(self):
        global global_input
        global_input = ['3']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=2), actual_io_trace)
    
    def test_fizz_buzz4(self):
        global global_input
        global_input = ['4']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=3), actual_io_trace)
    
    def test_fizz_buzz5(self):
        global global_input
        global_input = ['5']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=4), actual_io_trace)
    
    def test_fizz_buzz6(self):
        global global_input
        global_input = ['6']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=5), actual_io_trace)
    
    def test_fizz_buzz7(self):
        global global_input
        global_input = ['7']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=6), actual_io_trace)
    
    def test_fizz_buzz8(self):
        global global_input
        global_input = ['8']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=7), actual_io_trace)
    
    def test_fizz_buzz9(self):
        global global_input
        global_input = ['9']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=8), actual_io_trace)
    
    def test_fizz_buzz10(self):
        global global_input
        global_input = ['10']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=9), actual_io_trace)
    
    def test_fizz_buzz11(self):
        global global_input
        global_input = ['15']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=10), actual_io_trace)
    
    def test_fizz_buzz12(self):
        global global_input
        global_input = ['30']  # From an example of the .exem
        fizz_buzz()  # The function under test is used to write to actual_io_trace.
        self.assertEqual(get_expected_io('fizz_buzz.exem', example_id=11), actual_io_trace)


if __name__ == '__main__':
    unittest.main()
