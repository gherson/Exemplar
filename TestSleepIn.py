# AUTOGENERATED FILE -- RENAME OR YOUR EDITS WILL BE OVERWRITTEN
import unittest, exemplar
actual_io_trace = ''  # Receives test values print()'ed and input().
global_input = []   # Assigned in each test to provide input() values to the function under test.


# 3 functions unchanged from starter:
# print() is mocked to see if the tests recreate the .exem-specified i/o in actual_io_trace.
def print(line="") -> None:
    global actual_io_trace
    if line is str:
        line = line.translate(str.maketrans({"'": r"\'"}))  # Escape single quotes
    actual_io_trace += ">" + str(line) + '\n'


# input() is mocked to return the test-specified input as well as add it to actual_io_trace.
def input(variable_name: str = "") -> str:
    # (variable_name is ignored because it may not have been specified by the .exem.)
    global actual_io_trace
    result = global_input.pop(0)
    result = result.translate(str.maketrans({"'": r"\'"}))  # Escape single quotes
    actual_io_trace += "<" + result + '\n'  # Eg, '<Albert\n'
    return result


# The generated function under Stage 2 (i.e., a test per example) testing.
def sleep_in():
    weekday = int(input("weekday:"))  # Eg, 0
    vacation = int(input("vacation:"))  # Eg, 0
    if weekday==0 or vacation==1:
        print(1)
        return 1 
    else:  # == elif True:
        print(str(vacation))


class TestSleepIn(unittest.TestCase):

    def setUp(self):
        global actual_io_trace
        actual_io_trace = ''
        self.maxDiff = None

    def test_sleep_in7(self):
        global global_input
        global_input = ['0', '0']  # From the .exem
        sleep_in()  # The function under test is used to write to actual_io_trace.
        self.assertEqual('''<0
<0
>1
''', actual_io_trace)

    def test_sleep_in14(self):
        global global_input
        global_input = ['1', '0']  # From the .exem
        sleep_in()  # The function under test is used to write to actual_io_trace.
        self.assertEqual('''<1
<0
>0
''', actual_io_trace)

    def test_sleep_in17(self):
        global global_input
        global_input = ['0', '1']  # From the .exem
        sleep_in()  # The function under test is used to write to actual_io_trace.
        self.assertEqual('''<0
<1
>1
''', actual_io_trace)


if __name__ == '__main__':
    unittest.main()
